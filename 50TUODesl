#include <stdio.h>

/*
*  Funkce minimax.
*  Tato funkce najde minimum a maximum v danem vstupnim poli na jeho plne delce, pripadne na jeho efektivni delce (viz vstup "delka").
*  Vstup: 		+ int* pole 	- vstupni pole typu integer, ktere se predava pomoci ukazatele;
*				      + int delka 	- delka vstupniho pole pripadne efektivni delka (ta, ktera se uvazuje).
*  Vystup:  	+ int* minimum 	- odkazem se predava promenna typu integer, do ktere se ulozi nejmensi cislo v poli na efektivni delce, viz vyse;
*				      + int* maximum 	- odkazem se predava promenna typu integer, do ktere se ulozi nejvetsi cislo v poli na efektivni delce, viz vyse.
*/
void minimax(int *pole, int delka, int *minimum, int *maximum)
{
  int pom, i, mi = pole[0], ma = pole[0];

  for (i = 0; i < delka; i++) {
    pom = pole[i];

    if(pom < mi) {
      mi = pom;
    }

    if(pom > ma) {
      ma = pom;
    }
  }

  *minimum = mi;
  *maximum = ma;
}


/*
*  Funkce get_min.
*  Vypocita minimum v zadanem vstupnim poli na jeho plne delce, pripadne efektivni delce (viz delka) a vrati ho.
*  Tato funkce najde minimum a maximum v danem poli na jeho plne delce, pripadne na jeho efektivni delce (viz vstup "delka").
*  Vstup: 	+ int* pole 	- vstupni pole typu integer, ktere se predava pomoci ukazatele;
*			      + int delka 	- delka vstupniho pole pripadne efektivni delka (ta, ktera se uvazuje).
*  Vystup:	+ int (return) 	- vraci se promenna typu integer, do ktere se ulozi nejmensi cislo v poli na efektivni delce, viz vyse.
*
*/
int get_min(int *pole, int delka)
{
  int pom, i, mi = pole[0];

  for (i = 0; i < delka; i++) {
    pom = pole[i];

    if(pom < mi) {
      mi = pom;
    }
  }

  return mi;
}


/*
*  Funkce get_max.
*  Vypocita maximum v zadanem vstupnim poli na jeho plne delce, pripadne efektivni delce (viz delka) a vrati ho.
*  Tato funkce najde minimum a maximum v danem poli na jeho plne delce, pripadne na jeho efektivni delce (viz vstup "delka").
*  Vstup: 	+ int* pole 	- vstupni pole typu integer, ktere se predava pomoci ukazatele;
*			      + int delka 	- delka vstupniho pole pripadne efektivni delka (ta, ktera se uvazuje).
*  Vystup:	+ int (return) 	- vraci se promenna typu integer, do ktere se ulozi nejvetsi cislo v poli na efektivni delce, viz vyse.
*
*/
int get_max(int *pole, int delka)
{
  int pom, i, ma = pole[0];

  for (i = 0; i < delka; i++) {
    pom = pole[i];

    if(pom > ma) {
      ma = pom;
    }
  }

  return ma;
}


/*
*  Funkce fact.
*  Vypocita faktorial cisla n a vrati ho.
*  Vstup:	  + double n 		- cislo, jehoz faktorial se ma spocitat.
*  Vystup: 	+ double (return) 	- faktorial cisla n.
*/
double fact(double n)
{
  double k = 1;

  while (n != 0) {
    k *= n--;
  }

  return k;
}


/*
* Funkce fibonacci
* Funkce, ktera na vstup dostane cislo, ktere udava n. fibonacciho cislo, ktere vrati na vystupu.
* Vstup:  + int n 		- cislo, ktere udava poradi fibonacciho cisla, ktere se ma vratit.
* Vystup: + int (return)	- n. fibonacciho cislo.
*/
int fibonacci(int n)
{
  int a = 0, b = 1, i;
  if (n == 1) {
    return 0;
  } else if (n == 2) {
    return 1;
  } else if (n > 2) {
    for (i = 2; i < n; i++) {
      b += a;
      a = b - a;
    }
    return b;
  }
}

int main(int argc, char **argv)
{
	int i, p[21];
	for (i = 0; i < 21; i++) p[i] = i;
	
	// Testovani funkci
	for (i = 1; i < 21; i++) printf("f(%d) = %d\n", i, get_min(p, 21));
	return 0;
}
